name: Pull Request Tests

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel previous runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: '!github.event.pull_request.draft'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        
    - name: Install frontend dependencies
      run: npm ci
      
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run frontend linting
      run: npm run lint
      
    - name: Run TypeScript check
      run: npx tsc --noEmit
      
    - name: Run frontend tests
      run: npm test -- --watchAll=false --coverage
      
    - name: Run backend tests
      working-directory: ./backend
      run: python -m pytest tests/ -v
      
    - name: Test Docker builds
      run: |
        # Test backend Docker build
        docker build -f backend/Dockerfile -t test-backend backend/
        
        # Test frontend Docker build
        docker build -f docker/Dockerfile.frontend \
          --build-arg NEXT_PUBLIC_AZURE_CLIENT_ID=test \
          --build-arg NEXT_PUBLIC_AZURE_TENANT_ID=test \
          --build-arg NEXT_PUBLIC_API_URL=http://localhost:8000 \
          --build-arg NEXT_PUBLIC_REDIRECT_URI=http://localhost:3000 \
          -t test-frontend .
      
    - name: Add PR Comment
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Get job conclusion
          const conclusion = '${{ job.status }}';
          const runUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
          
          let comment = '## üîç Test Results\n\n';
          
          if (conclusion === 'success') {
            comment += '‚úÖ All tests passed successfully!\n\n';
            comment += '- Frontend linting: ‚úÖ\n';
            comment += '- TypeScript check: ‚úÖ\n';
            comment += '- Frontend tests: ‚úÖ\n';
            comment += '- Backend tests: ‚úÖ\n';
            comment += '- Docker builds: ‚úÖ\n';
          } else {
            comment += '‚ùå Some tests failed. Please check the details below.\n\n';
            comment += `[View detailed results](${runUrl})\n`;
          }
          
          comment += `\n---\n*Automated test run for commit ${{ github.event.pull_request.head.sha }}*`;
          
          // Find existing comment and update it, or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('üîç Test Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }
