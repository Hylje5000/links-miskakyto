name: Test Suite

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run TypeScript check
      run: npx tsc --noEmit
      
    - name: Run frontend tests
      run: npm test -- --coverage --watchAll=false
      
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v4
      if: success()
      with:
        files: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run backend tests with coverage
      working-directory: ./backend
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
        
    - name: Upload backend coverage
      uses: codecov/codecov-action@v4
      if: success()
      with:
        files: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Test frontend Docker build
      run: |
        docker build -f docker/Dockerfile.frontend \
          --build-arg NEXT_PUBLIC_AZURE_CLIENT_ID=test \
          --build-arg NEXT_PUBLIC_AZURE_TENANT_ID=test \
          --build-arg NEXT_PUBLIC_API_URL=http://localhost:8000 \
          --build-arg NEXT_PUBLIC_REDIRECT_URI=http://localhost:3000 \
          -t linkshortener-frontend:test .
          
    - name: Test backend Docker build
      run: |
        docker build -f backend/Dockerfile \
          -t linkshortener-backend:test backend/
          
    - name: Test Docker Compose
      run: |
        # Create a minimal docker-compose.test.yml for testing
        cat > docker-compose.test.yml << EOF
        services:
          backend:
            build:
              context: ./backend
              dockerfile: Dockerfile
            environment:
              - TEST_MODE=true
              - DATABASE_URL=sqlite:///data/test.db
            volumes:
              - ./test-data:/app/data
            ports:
              - "8000:8000"
        EOF
        
        # Test compose up and health check
        mkdir -p test-data
        docker-compose -f docker-compose.test.yml up -d
        
        # Wait for service to be ready
        timeout 60 bash -c 'until curl -f http://localhost:8000/api/health; do sleep 2; done'
        
        # Clean up
        docker-compose -f docker-compose.test.yml down
        rm -rf test-data docker-compose.test.yml

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install Python linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        
    - name: Check Python code formatting with Black
      working-directory: ./backend
      run: black --check --diff .
      
    - name: Check Python imports with isort
      working-directory: ./backend
      run: isort --check-only --diff .
      
    - name: Run Python linting with flake8
      working-directory: ./backend
      run: flake8 . --max-line-length=88 --extend-ignore=E203,W503
      
    - name: Run Python type checking with mypy
      working-directory: ./backend
      run: mypy . --ignore-missing-imports --no-strict-optional
      continue-on-error: true  # Allow mypy to fail without failing the whole job

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js for npm audit
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Run npm audit
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Setup Python for safety check
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install safety
      run: pip install safety
      
    - name: Run Python security audit
      working-directory: ./backend
      run: safety check -r requirements.txt
      continue-on-error: true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, docker-build-test, code-quality, security-scan]
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.frontend-tests.result }}" == "success" ]; then
          echo "✅ Frontend tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Frontend tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.backend-tests.result }}" == "success" ]; then
          echo "✅ Backend tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Backend tests failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.docker-build-test.result }}" == "success" ]; then
          echo "✅ Docker builds passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Docker builds failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.code-quality.result }}" == "success" ]; then
          echo "✅ Code quality checks passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code quality checks failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ Security scans passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Security scans had issues (non-blocking)" >> $GITHUB_STEP_SUMMARY
        fi
